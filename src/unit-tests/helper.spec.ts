import path from "path";
import { describe, expect, test } from "vitest";
import { getColorUsedInContent } from "../helper";
import fs from "fs";

const __dirname = path.resolve();
const folderDirectory = path.join(__dirname, "src", "unit-tests");

describe("Extract colors in file", () => {
  test("scenario 1", () => {
    const input = `
    rgb(111,111,111,111)
    rgb(1,1,1,1,1)
    `;
    const colorUsage = getColorUsedInContent(input);
    expect(Array.from(colorUsage.keys())).toContain("rgb(111,111,111,111)");
    expect(colorUsage.size).toBe(1);
  });

  test("scenario 1", () => {
    const input = `
    red
    rgb(1,1,1,1,1)
    `;
    const colorUsage = getColorUsedInContent(input);
    expect(Array.from(colorUsage.keys())).toContain("red");
    expect(colorUsage.size).toBe(1);
  });
});

describe("Get color usage", () => {
  test("scenario 1", () => {
    const file = path.join(folderDirectory, "scenario1.js");
    const content = fs.readFileSync(file, "utf8");
    const colorUsage = getColorUsedInContent(content);
    expect(Array.from(colorUsage.keys())).toContain("rgb(0,0,0)");
    expect(Array.from(colorUsage.keys())).toContain("#343434");
    expect(colorUsage.size).toBe(2);
  });

  test("scenario 2", () => {
    const file = path.join(folderDirectory, "scenario2.js");
    const content = fs.readFileSync(file, "utf8");
    const colorUsage = getColorUsedInContent(content);
    expect(Array.from(colorUsage.keys())).toContain("red");
    expect(Array.from(colorUsage.keys())).toContain("black");
    expect(colorUsage.size).toBe(2);
  });
});

describe("color extraction", () => {
  test("should not pick up non color strings", () => {
    const string = "0x792";
    const colorUsage = getColorUsedInContent(string);
    expect(colorUsage.size).toBe(0);
  });
});

// Generated by CodiumAI

describe("getColorUsedInContent", () => {
  // Detects and counts hexadecimal colors correctly
  test("should count hexadecimal colors accurately in content", () => {
    const content = "#123abc #123abc #fff";
    const expected = new Map([
      ["#123abc", 2],
      ["#fff", 1],
    ]);
    const result = getColorUsedInContent(content);
    expect(result).toEqual(expected);
  });

  // Handles files with no colors present
  test("should return an empty map when no colors are present", () => {
    const content = "This is a test string without any color codes.";
    const expected = new Map();
    const result = getColorUsedInContent(content);
    expect(result).toEqual(expected);
  });

  test("rgb colors", () => {
    const content = "rgb(0,0,0)";
    const result = getColorUsedInContent(content);
    expect(result.has("rgb(0,0,0)")).toBeTruthy();
  });

  test("rgba colors", () => {
    const content = "rgba(0,0,0,1)";
    const result = getColorUsedInContent(content);
    expect(result.has("rgba(0,0,0,1)")).toBeTruthy();
  });
});
